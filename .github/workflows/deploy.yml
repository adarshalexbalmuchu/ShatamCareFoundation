name: Deploy to GitHub Pages

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  # Allow manual triggering
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Full history for better versioning
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Type check
      run: npm run typecheck || exit 1
    
    - name: Clean any previous builds
      run: |
        rm -rf dist
        rm -rf node_modules/.cache/gh-pages

    - name: Build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
      run: npm run build
    
    - name: Create .nojekyll file
      run: touch dist/.nojekyll

    - name: Verify build output
      run: |
        echo "Verifying build output structure..."
        ls -la dist/
        echo "Checking that index.html references correct assets..."
        grep -n "assets/" dist/index.html || echo "Warning: No assets found in index.html"
        
        # Make sure no source files are included
        echo "Making sure no source files are in the dist folder..."
        if [ -d "dist/src" ]; then
          echo "ERROR: Source files found in dist/src! Removing..."
          rm -rf dist/src
        else
          echo "‚úÖ No source files in dist/"
        fi
        
        # Verify that routes will work with static hosting
        echo "Creating fallback route handling for SPA..."
        cp dist/index.html dist/404.html

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Verify deployment (wait for DNS)
        run: |
          echo "‚è≥ Waiting for GitHub Pages to finish deployment (30 seconds)..."
          sleep 30
          
          echo "üîç Attempting to verify deployed site..."
          SITE_URL="${{ steps.deployment.outputs.page_url }}"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL")
          
          echo "üìä HTTP Status: $HTTP_STATUS"
          if [ "$HTTP_STATUS" -eq 200 ]; then
            echo "‚úÖ Site appears to be live!"
            
            # Check for common error indicators in the response
            echo "üîç Checking for common deployment issues..."
            RESPONSE=$(curl -s "$SITE_URL")
            if echo "$RESPONSE" | grep -q "src/"; then
              echo "‚ö†Ô∏è WARNING: Response contains references to source files!"
              echo "This may indicate the wrong version of index.html is being served."
            else
              echo "‚úÖ No references to source files found in response."
            fi
            
            # Test a subpath to ensure router is working
            echo "üîç Testing a subpath to verify routing..."
            SUBPATH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${SITE_URL}our-programs")
            echo "üìä Subpath HTTP Status: $SUBPATH_STATUS"
            if [ "$SUBPATH_STATUS" -eq 200 ]; then
              echo "‚úÖ Subpath routing appears to be working!"
            else
              echo "‚ö†Ô∏è Subpath returned $SUBPATH_STATUS - may need to verify SPA routing."
            fi
          else
            echo "‚ö†Ô∏è Site may not be fully deployed yet. Check manually in a few minutes."
          fi
